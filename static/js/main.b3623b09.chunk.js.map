{"version":3,"sources":["style/styles.js","components/InputTodo.js","components/ListTodo.js","App.js","reportWebVitals.js","index.js"],"names":["StyledInput","styled","input","attrs","type","value","length","TodoItem","span","isDone","SaveButton","button","DeleteButton","GlobalStyle","createGlobalStyle","InputTodo","saveTodo","useState","inputValue","setInputValue","onChange","e","target","onClick","ListTodo","list","toggleTodoCheck","deleteTodo","map","todo","style","marginRight","defaultChecked","event","checked","key","title","App","todoList","setTodoList","useEffect","localStorage","setItem","JSON","stringify","className","trimmedValue","trim","uuidv4","console","log","alert","updatedTodoList","filteredTodo","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAIaA,EAAcC,IAAOC,MAAMC,MAAM,CAC1CC,KAAK,SADkBH,CAAH,yEAGJ,qBAAEI,MAAgBC,OAAS,EAAI,QAAU,SAKhDC,EAAWN,IAAOO,KAAV,sDACE,qBAAEC,OAAqB,eAAiB,UAGlDC,EAAaT,IAAOU,OAAV,mLAWVC,EAAeX,IAAOU,OAAV,kLAYZE,EAAcC,YAAH,0E,OCnCT,SAASC,EAAT,GAEX,IADAC,EACD,EADCA,SAEA,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAKA,OACS,gCACD,cAACnB,EAAD,CAAaK,MAAOa,EAAYE,SALlB,SAACC,GACnBF,EAAcE,EAAEC,OAAOjB,UAKnB,cAACK,EAAD,CAAYa,QAAS,kBAAIP,EAASE,IAAlC,qBCbI,SAASM,EAAT,GAA8D,IAAD,IAAzCC,YAAyC,MAAlC,GAAkC,EAA9BC,EAA8B,EAA9BA,gBAAiBC,EAAa,EAAbA,WAG5D,OACEF,EAAKG,KAAI,SAACC,GAEJ,OACI,gCACI,uBAAOzB,KAAK,WAAW0B,MAAO,CAAGC,YAAY,QAE7CC,eAAgBH,EAAKpB,OACrBc,QAAS,SAACU,GAAD,OAAUP,EAAgB,CAC/BjB,OAAOwB,EAAMX,OAAOY,QACpBC,IAAIN,EAAKM,SAGZ,cAAC5B,EAAD,CAAUE,OAAQoB,EAAKpB,OAAvB,SAAgCoB,EAAKO,QAEtC,cAACxB,EAAD,CAAcW,QAAS,kBAAII,EAAWE,EAAKM,MAA3C,oBACA,6B,YCoDLE,MAnEf,WAGE,MAAgCpB,mBAAS,IAAzC,mBAAOqB,EAAP,KAAiBC,EAAjB,KAoDA,OAhDAC,qBAAU,WAEHF,EAAShC,OAAS,GACnBmC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUN,MAE/C,CAACA,IA6CI,sBAAKO,UAAU,MAAf,UACK,cAAChC,EAAD,IACT,cAACE,EAAD,CAAWC,SA9BE,SAACX,GAChB,IAAMyC,EAAezC,EAAM0C,OAC3B,GAAID,EAAJ,CAME,IAAMjB,EAAK,CACTM,IAAIa,cACJZ,MAAOU,EACPrC,QAAQ,GAEV8B,EAAY,GAAD,mBAAKD,GAAL,CAAeT,KAE5BoB,QAAQC,IAAIZ,QAZVa,MAAM,4CA4BN,cAAC3B,EAAD,CAAUC,KAAMa,EAAUZ,gBA7CN,SAAC,GAAmB,IAAlBjB,EAAiB,EAAjBA,OAAQ0B,EAAS,EAATA,IAC1BiB,EAAkBd,EAASV,KAAI,SAACC,GAClC,OAAGA,EAAKM,MAAQA,EACd,2BACKN,GADL,IAEEpB,WAGGoB,KAGXU,EAAYa,IAkCkDzB,WAd7C,SAACQ,GAClB,IAAMkB,EAAef,EAASgB,QAAO,SAACzB,GACpC,OAAOA,EAAKM,MAAQA,KAEtBI,EAAYc,UC5CDE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3623b09.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport {createGlobalStyle} from 'styled-components';\r\n\r\n\r\nexport const StyledInput = styled.input.attrs({\r\n    type:\"input\"\r\n})`\r\n    border-color: ${({value})=> value.length > 5 ? 'green' : 'red'};\r\n    outline:none;\r\n\r\n`;\r\n\r\nexport const TodoItem = styled.span`\r\n    text-decoration: ${({isDone})=> (isDone ? \"line-through\" : \"none\")}\r\n`;\r\n\r\nexport const SaveButton = styled.button`\r\nbackground:palevioletred;\r\ncolor:white;\r\nfont-size: 1em;\r\nmargin: 1em;\r\npadding: 0.25em 1em;\r\nborder: 2px solid palevioletred;\r\nborder-radius: 3px;\r\n\r\n`;\r\n\r\nexport const DeleteButton = styled.button`\r\nbackground:white\r\ncolor:palevioletred;\r\nfont-size: 1em;\r\nmargin: 1em;\r\npadding: 0.25em 1em;\r\nborder: 2px solid palevioletred;\r\nborder-radius: 3px;\r\n\r\n`;\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    *{\r\n            font-size:1rem;\r\n    }\r\n`;","import React from 'react'\r\nimport { useState } from \"react\";\r\nimport {StyledInput, SaveButton} from \"../style/styles\";\r\n\r\nexport default function InputTodo({\r\n    saveTodo\r\n}) {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const inputOnChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    return (\r\n             <div>\r\n            <StyledInput value={inputValue} onChange={inputOnChange}/>\r\n            <SaveButton onClick={()=>saveTodo(inputValue)}>Save</SaveButton>\r\n        </div>\r\n       \r\n    )\r\n}\r\n","import React from 'react'\r\nimport {  TodoItem, DeleteButton } from '../style/styles'\r\nexport  default function ListTodo({ list = [], toggleTodoCheck, deleteTodo}) {\r\n    \r\n\r\n    return (\r\n      list.map((todo) => {\r\n\r\n            return(\r\n                <div>\r\n                    <input type=\"checkbox\" style={{  marginRight:\"15px\"\r\n                   }} \r\n                    defaultChecked={todo.isDone}\r\n                    onClick={(event)=> toggleTodoCheck({\r\n                        isDone:event.target.checked,\r\n                        key:todo.key\r\n                    })}\r\n                    />        \r\n                     <TodoItem isDone={todo.isDone}>{todo.title}</TodoItem>\r\n\r\n                    <DeleteButton onClick={()=>deleteTodo(todo.key)}>Delete</DeleteButton>\r\n                    <hr></hr>\r\n                </div>\r\n            )\r\n        })\r\n    \r\n    )\r\n}\r\n","import './style/App.css';\nimport InputTodo from './components/InputTodo';\nimport ListTodo from './components/ListTodo';\nimport {useState, useEffect} from \"react\";\nimport { v4 as uuidv4 } from 'uuid';\nimport {GlobalStyle} from \"./style/styles\";\nfunction App() {\n \n\n  const [todoList, setTodoList] = useState([]);\n\n  \n\n  useEffect(() => {\n    // storing input name\n      if(todoList.length > 0){\n        localStorage.setItem(\"todo\", JSON.stringify(todoList));\n      }\n  }, [todoList]);\n\n \n  const toggleTodoCheck = ({isDone, key}) => {\n    const updatedTodoList = todoList.map((todo)=>{\n        if(todo.key === key){\n          return{\n            ...todo,\n            isDone\n          }\n        }\n        return todo;\n\n    })\n    setTodoList(updatedTodoList);\n  }\n\n  const saveTodo = (value) => {\n    const trimmedValue = value.trim();\n    if(!trimmedValue){\n      alert(\"Boş bırakmayınız!\");\n      return;\n    }\n    else {\n\n      const todo={\n        key:uuidv4(),\n        title: trimmedValue,\n        isDone: false\n      }\n      setTodoList([...todoList, todo]);\n    }\n    console.log(todoList);\n  }\n  const deleteTodo = (key) => {\n    const filteredTodo = todoList.filter((todo) => {\n      return todo.key !== key;\n    });\n    setTodoList(filteredTodo);\n  };\n\n\n\n  return (\n \n          <div className=\"App\">\n               <GlobalStyle />\n      <InputTodo saveTodo={saveTodo}/>\n      <ListTodo list={todoList} toggleTodoCheck={toggleTodoCheck} deleteTodo={deleteTodo}/>\n    </div>\n \n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}